package com.zavedahmad.yaHabit.ui.addHabitPage

import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material3.ButtonGroupDefaults
import androidx.compose.material3.ExperimentalMaterial3ExpressiveApi
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.ToggleButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextOverflow
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.zavedahmad.yaHabit.utils.roundTo
import kotlinx.coroutines.flow.MutableStateFlow
import java.math.RoundingMode
import kotlin.math.pow
import kotlin.math.roundToLong

@OptIn(ExperimentalMaterial3ExpressiveApi::class)
@Composable
fun RepetitionPerDaySelector(viewModel: AddHabitPageViewModel) {
    val options = listOf<String>("Automatic", "Custom")
    val selectedOption = rememberSaveable { mutableStateOf(0) }
    val customValue = remember { mutableStateOf("1") }
    val repetitionsPerDay = remember {
        derivedStateOf {
            if (selectedOption.value == 1) {
                true
            }
        }
    }
    val isCustomValid = remember {
        derivedStateOf {
            val doubleValue = customValue.value.toDoubleOrNull()
            if (doubleValue != null) {
                if (doubleValue > 0.0) {
                    true
                } else {
                    false
                }


            } else {
                false
            }
        }
    }
    val frequency = viewModel.habitFrequency.collectAsStateWithLifecycle()
    val cycle = viewModel.habitCycle.collectAsStateWithLifecycle()
    val autoGeneratedRepetitionsPerDay = rememberSaveable { mutableStateOf(1.0) }
    LaunchedEffect(frequency.value, cycle.value) {
        if (selectedOption.value == 0) {
            val freq = frequency.value?.toDouble()
            val cyc = cycle.value?.toDouble()
            if (freq != null && cyc != null && cyc != 0.0) {
                val result = freq / cyc
                if (result < 1.0) {
                    autoGeneratedRepetitionsPerDay.value = 1.0
                } else {
                    autoGeneratedRepetitionsPerDay.value = result.roundTo(2)
                }
            }
        }
    }
    val repetitionPerDayToShow = remember {
        derivedStateOf {
            if (selectedOption.value == 0) {
                autoGeneratedRepetitionsPerDay.value.toString()
            } else {

                customValue.value

            }
        }
    }
    val finalRepetitionPerDay = remember {
        derivedStateOf {
            val valueDouble = repetitionPerDayToShow.value.toDoubleOrNull()
            if (valueDouble != null) {
                valueDouble
            } else {
                autoGeneratedRepetitionsPerDay.value
            }
        }
    }

    Row(Modifier.fillMaxWidth()) {
        options.forEachIndexed { index, item ->
            val isChecked = selectedOption.value == index
            ToggleButton(
                modifier = if (!isChecked) {
                    Modifier
                } else {
                    Modifier
                },
                checked = isChecked, shapes = when (index) {
                    0 -> ButtonGroupDefaults.connectedLeadingButtonShapes(
                        pressedShape = ButtonGroupDefaults.connectedButtonCheckedShape,
                        shape = ButtonGroupDefaults.connectedLeadingButtonPressShape
                    )

                    options.lastIndex -> ButtonGroupDefaults.connectedTrailingButtonShapes(
                        pressedShape = ButtonGroupDefaults.connectedButtonCheckedShape,
                        shape = ButtonGroupDefaults.connectedTrailingButtonPressShape
                    )

                    else -> ButtonGroupDefaults.connectedMiddleButtonShapes(
                        pressedShape = ButtonGroupDefaults.connectedButtonCheckedShape,
                        shape = ButtonGroupDefaults.connectedMiddleButtonPressShape
                    )
                }, onCheckedChange = {
                    if (!isChecked) {

                        selectedOption.value = index
                    }
                })

            {
                Row {  /*AnimatedVisibility(visible = streakChecked.value == index) {
                                Icon(Icons.Default.Check, contentDescription = "selected", modifier = Modifier.size(15.dp))
                            }*/
                    Text(item, overflow = TextOverflow.Ellipsis, maxLines = 1)
                }
            }
        }
    }
    InvalidValueIndicator(visible = !isCustomValid.value)
    Text(finalRepetitionPerDay.value.toString())
    TextField(
        value = repetitionPerDayToShow.value,
        colors = TextFieldDefaults.colors(
            focusedIndicatorColor = Color.Transparent,
            unfocusedIndicatorColor = Color.Transparent
        ),
        enabled = selectedOption.value == 1,
        onValueChange = {
            customValue.value = it

        })

}

